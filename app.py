import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import openai
from fpdf import FPDF
import os

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á OpenAI –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai.api_key = os.getenv("OPENAI_API_KEY")

# –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —à—Ä–∏—Ñ—Ç—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
FONT_PATH = "fonts/arial.ttf"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ PDF-–∫–ª–∞—Å—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode
class PDF(FPDF):
    def __init__(self):
        super().__init__()
        self.add_font("ArialUnicode", "", FONT_PATH, uni=True)
        self.set_font("ArialUnicode", "", 12)
        self.set_auto_page_break(auto=True, margin=15)

st.title("üìä AI Excel –ê–Ω–∞–ª–∏—Ç–∏–∫ + PDF-–æ—Ç—á—ë—Ç")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏ Excel –∏–ª–∏ CSV", type=["xlsx", "csv"])

if uploaded_file:
    if uploaded_file.name.endswith(".csv"):
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.read_excel(uploaded_file)

    st.subheader("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã:")
    st.write(df.head())

    numeric_cols = df.select_dtypes(include='number').columns.tolist()

    if not numeric_cols:
        st.warning("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    else:
        if st.button("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF-–æ—Ç—á—ë—Ç"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞..."):
                pdf = PDF()

                for col in numeric_cols:
                    # –ì—Ä–∞—Ñ–∏–∫
                    plt.figure(figsize=(8, 3))
                    df[col].plot(kind='line', title=col)
                    plt.tight_layout()
                    img_path = f"{col}.png"
                    plt.savefig(img_path)
                    plt.close()

                    # GPT-–∞–Ω–∞–ª–∏–∑
                    try:
                        response = openai.ChatCompletion.create(
                            model="gpt-3.5-turbo",
                            messages=[
                                {"role": "system", "content": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –ø–æ–Ω—è—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç—Ç–æ–π —á–∏—Å–ª–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏."},
                                {"role": "user", "content": f"–ö–æ–ª–æ–Ω–∫–∞: {col}. –î–∞–Ω–Ω—ã–µ: {df[col].dropna().tolist()}"}
                            ],
                            max_tokens=300
                        )
                        analysis = response['choices'][0]['message']['content']
                    except Exception as e:
                        analysis = f"[–û—à–∏–±–∫–∞ GPT: {e}]"

                    # PDF —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                    pdf.add_page()
                    pdf.set_font("ArialUnicode", size=14)
                    pdf.cell(0, 10, f"–ê–Ω–∞–ª–∏–∑: {col}", ln=True)
                    pdf.image(img_path, w=180)
                    pdf.set_font("ArialUnicode", size=12)
                    pdf.multi_cell(0, 10, analysis)

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    os.remove(img_path)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
                pdf_output_path = "report.pdf"
                pdf.output(pdf_output_path)

                with open(pdf_output_path, "rb") as f:
                    st.success("–ì–æ—Ç–æ–≤–æ! –°–∫–∞—á–∞–π –æ—Ç—á—ë—Ç:")
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å PDF",
                        data=f,
                        file_name="Excel_AI_–û—Ç—á—ë—Ç.pdf",
                        mime="application/pdf"
                    )
